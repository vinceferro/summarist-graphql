// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Recording is an object representing the database table.
type Recording struct {
	ID      string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BookID  null.String `boil:"book_id" json:"book_id,omitempty" toml:"book_id" yaml:"book_id,omitempty"`
	Path    string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	Format  string      `boil:"format" json:"format" toml:"format" yaml:"format"`
	Version null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`

	R *recordingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recordingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecordingColumns = struct {
	ID      string
	BookID  string
	Path    string
	Format  string
	Version string
}{
	ID:      "id",
	BookID:  "book_id",
	Path:    "path",
	Format:  "format",
	Version: "version",
}

// Generated where

var RecordingWhere = struct {
	ID      whereHelperstring
	BookID  whereHelpernull_String
	Path    whereHelperstring
	Format  whereHelperstring
	Version whereHelpernull_String
}{
	ID:      whereHelperstring{field: "\"recording\".\"id\""},
	BookID:  whereHelpernull_String{field: "\"recording\".\"book_id\""},
	Path:    whereHelperstring{field: "\"recording\".\"path\""},
	Format:  whereHelperstring{field: "\"recording\".\"format\""},
	Version: whereHelpernull_String{field: "\"recording\".\"version\""},
}

// RecordingRels is where relationship names are stored.
var RecordingRels = struct {
	Book string
}{
	Book: "Book",
}

// recordingR is where relationships are stored.
type recordingR struct {
	Book *Book `boil:"Book" json:"Book" toml:"Book" yaml:"Book"`
}

// NewStruct creates a new relationship struct
func (*recordingR) NewStruct() *recordingR {
	return &recordingR{}
}

// recordingL is where Load methods for each relationship are stored.
type recordingL struct{}

var (
	recordingAllColumns            = []string{"id", "book_id", "path", "format", "version"}
	recordingColumnsWithoutDefault = []string{"book_id", "path", "format", "version"}
	recordingColumnsWithDefault    = []string{"id"}
	recordingPrimaryKeyColumns     = []string{"id"}
)

type (
	// RecordingSlice is an alias for a slice of pointers to Recording.
	// This should generally be used opposed to []Recording.
	RecordingSlice []*Recording
	// RecordingHook is the signature for custom Recording hook methods
	RecordingHook func(boil.Executor, *Recording) error

	recordingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recordingType                 = reflect.TypeOf(&Recording{})
	recordingMapping              = queries.MakeStructMapping(recordingType)
	recordingPrimaryKeyMapping, _ = queries.BindMapping(recordingType, recordingMapping, recordingPrimaryKeyColumns)
	recordingInsertCacheMut       sync.RWMutex
	recordingInsertCache          = make(map[string]insertCache)
	recordingUpdateCacheMut       sync.RWMutex
	recordingUpdateCache          = make(map[string]updateCache)
	recordingUpsertCacheMut       sync.RWMutex
	recordingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recordingBeforeInsertHooks []RecordingHook
var recordingBeforeUpdateHooks []RecordingHook
var recordingBeforeDeleteHooks []RecordingHook
var recordingBeforeUpsertHooks []RecordingHook

var recordingAfterInsertHooks []RecordingHook
var recordingAfterSelectHooks []RecordingHook
var recordingAfterUpdateHooks []RecordingHook
var recordingAfterDeleteHooks []RecordingHook
var recordingAfterUpsertHooks []RecordingHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Recording) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range recordingBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Recording) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range recordingBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Recording) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range recordingBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Recording) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range recordingBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Recording) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range recordingAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Recording) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range recordingAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Recording) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range recordingAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Recording) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range recordingAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Recording) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range recordingAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecordingHook registers your hook function for all future operations.
func AddRecordingHook(hookPoint boil.HookPoint, recordingHook RecordingHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recordingBeforeInsertHooks = append(recordingBeforeInsertHooks, recordingHook)
	case boil.BeforeUpdateHook:
		recordingBeforeUpdateHooks = append(recordingBeforeUpdateHooks, recordingHook)
	case boil.BeforeDeleteHook:
		recordingBeforeDeleteHooks = append(recordingBeforeDeleteHooks, recordingHook)
	case boil.BeforeUpsertHook:
		recordingBeforeUpsertHooks = append(recordingBeforeUpsertHooks, recordingHook)
	case boil.AfterInsertHook:
		recordingAfterInsertHooks = append(recordingAfterInsertHooks, recordingHook)
	case boil.AfterSelectHook:
		recordingAfterSelectHooks = append(recordingAfterSelectHooks, recordingHook)
	case boil.AfterUpdateHook:
		recordingAfterUpdateHooks = append(recordingAfterUpdateHooks, recordingHook)
	case boil.AfterDeleteHook:
		recordingAfterDeleteHooks = append(recordingAfterDeleteHooks, recordingHook)
	case boil.AfterUpsertHook:
		recordingAfterUpsertHooks = append(recordingAfterUpsertHooks, recordingHook)
	}
}

// OneG returns a single recording record from the query using the global executor.
func (q recordingQuery) OneG() (*Recording, error) {
	return q.One(boil.GetDB())
}

// One returns a single recording record from the query.
func (q recordingQuery) One(exec boil.Executor) (*Recording, error) {
	o := &Recording{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recording")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Recording records from the query using the global executor.
func (q recordingQuery) AllG() (RecordingSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Recording records from the query.
func (q recordingQuery) All(exec boil.Executor) (RecordingSlice, error) {
	var o []*Recording

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Recording slice")
	}

	if len(recordingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Recording records in the query, and panics on error.
func (q recordingQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Recording records in the query.
func (q recordingQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recording rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q recordingQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q recordingQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recording exists")
	}

	return count > 0, nil
}

// Book pointed to by the foreign key.
func (o *Recording) Book(mods ...qm.QueryMod) bookQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BookID),
	}

	queryMods = append(queryMods, mods...)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "\"book\"")

	return query
}

// LoadBook allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recordingL) LoadBook(e boil.Executor, singular bool, maybeRecording interface{}, mods queries.Applicator) error {
	var slice []*Recording
	var object *Recording

	if singular {
		object = maybeRecording.(*Recording)
	} else {
		slice = *maybeRecording.(*[]*Recording)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recordingR{}
		}
		if !queries.IsNil(object.BookID) {
			args = append(args, object.BookID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recordingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BookID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BookID) {
				args = append(args, obj.BookID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`book`),
		qm.WhereIn(`book.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book")
	}

	if len(recordingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Book = foreign
		if foreign.R == nil {
			foreign.R = &bookR{}
		}
		foreign.R.Recordings = append(foreign.R.Recordings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BookID, foreign.ID) {
				local.R.Book = foreign
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Recordings = append(foreign.R.Recordings, local)
				break
			}
		}
	}

	return nil
}

// SetBookG of the recording to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.Recordings.
// Uses the global database handle.
func (o *Recording) SetBookG(insert bool, related *Book) error {
	return o.SetBook(boil.GetDB(), insert, related)
}

// SetBook of the recording to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.Recordings.
func (o *Recording) SetBook(exec boil.Executor, insert bool, related *Book) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recording\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"book_id"}),
		strmangle.WhereClause("\"", "\"", 2, recordingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BookID, related.ID)
	if o.R == nil {
		o.R = &recordingR{
			Book: related,
		}
	} else {
		o.R.Book = related
	}

	if related.R == nil {
		related.R = &bookR{
			Recordings: RecordingSlice{o},
		}
	} else {
		related.R.Recordings = append(related.R.Recordings, o)
	}

	return nil
}

// RemoveBookG relationship.
// Sets o.R.Book to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Recording) RemoveBookG(related *Book) error {
	return o.RemoveBook(boil.GetDB(), related)
}

// RemoveBook relationship.
// Sets o.R.Book to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Recording) RemoveBook(exec boil.Executor, related *Book) error {
	var err error

	queries.SetScanner(&o.BookID, nil)
	if _, err = o.Update(exec, boil.Whitelist("book_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Book = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Recordings {
		if queries.Equal(o.BookID, ri.BookID) {
			continue
		}

		ln := len(related.R.Recordings)
		if ln > 1 && i < ln-1 {
			related.R.Recordings[i] = related.R.Recordings[ln-1]
		}
		related.R.Recordings = related.R.Recordings[:ln-1]
		break
	}
	return nil
}

// Recordings retrieves all the records using an executor.
func Recordings(mods ...qm.QueryMod) recordingQuery {
	mods = append(mods, qm.From("\"recording\""))
	return recordingQuery{NewQuery(mods...)}
}

// FindRecordingG retrieves a single record by ID.
func FindRecordingG(iD string, selectCols ...string) (*Recording, error) {
	return FindRecording(boil.GetDB(), iD, selectCols...)
}

// FindRecording retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecording(exec boil.Executor, iD string, selectCols ...string) (*Recording, error) {
	recordingObj := &Recording{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recording\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, recordingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recording")
	}

	return recordingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Recording) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Recording) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recording provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recordingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recordingInsertCacheMut.RLock()
	cache, cached := recordingInsertCache[key]
	recordingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recordingAllColumns,
			recordingColumnsWithDefault,
			recordingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recordingType, recordingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recordingType, recordingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recording\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recording\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recording")
	}

	if !cached {
		recordingInsertCacheMut.Lock()
		recordingInsertCache[key] = cache
		recordingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Recording record using the global executor.
// See Update for more documentation.
func (o *Recording) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Recording.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Recording) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recordingUpdateCacheMut.RLock()
	cache, cached := recordingUpdateCache[key]
	recordingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recordingAllColumns,
			recordingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recording, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recording\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recordingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recordingType, recordingMapping, append(wl, recordingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recording row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recording")
	}

	if !cached {
		recordingUpdateCacheMut.Lock()
		recordingUpdateCache[key] = cache
		recordingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q recordingQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q recordingQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recording")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recording")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RecordingSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecordingSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recording\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recordingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recording slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recording")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Recording) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Recording) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recording provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recordingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recordingUpsertCacheMut.RLock()
	cache, cached := recordingUpsertCache[key]
	recordingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recordingAllColumns,
			recordingColumnsWithDefault,
			recordingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recordingAllColumns,
			recordingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recording, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recordingPrimaryKeyColumns))
			copy(conflict, recordingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recording\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recordingType, recordingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recordingType, recordingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recording")
	}

	if !cached {
		recordingUpsertCacheMut.Lock()
		recordingUpsertCache[key] = cache
		recordingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Recording record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Recording) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Recording record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Recording) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Recording provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recordingPrimaryKeyMapping)
	sql := "DELETE FROM \"recording\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recording")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recording")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q recordingQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q recordingQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recordingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recording")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recording")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RecordingSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecordingSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recordingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recording\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recordingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recording slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recording")
	}

	if len(recordingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Recording) ReloadG() error {
	if o == nil {
		return errors.New("models: no Recording provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Recording) Reload(exec boil.Executor) error {
	ret, err := FindRecording(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecordingSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RecordingSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecordingSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecordingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recordingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recording\".* FROM \"recording\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recordingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecordingSlice")
	}

	*o = slice

	return nil
}

// RecordingExistsG checks if the Recording row exists.
func RecordingExistsG(iD string) (bool, error) {
	return RecordingExists(boil.GetDB(), iD)
}

// RecordingExists checks if the Recording row exists.
func RecordingExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recording\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recording exists")
	}

	return exists, nil
}
